{{   
function joiValidator(f) {
    let out = "Joi.";
    
    if (f.type === "boolean") out += "boolean()";
    else if (f.type === "string") {
        out +=  "string()";
        if (f.subtype === "email") out += ".email()";
        else if (f.subtype === "password") out += ".min(6)";
        out +=  ".trim()";
    }
    else if (f.type === "number" || f.type === "datetime") {
        out +=  "number()";
        if (f.subtype === "latitude") out += ".min(-90).max(90)";
        else if (f.subtype === "longitude") out += ".min(-180).max(180)";
    }
    if (f.type === "entity") out +=  "string().length(24).hex()";
    
    /* Multiple and nullable */
    if (f.multiple) {
        out = `Joi.array().items(${out})`;
        out += f.nullable ? ".min(0)" : ".min(1)";
    } else {
        if (f.nullable) out += ".allow(null)";
    }
    
    return out;
}
}}'use strict';
 
/**
 * Update {{=it.m.names.wordsLower}}
 */
 
const Joi = require('joi');
const Boom = require('boom');
const MongoDB = require('mongodb');
 
// Validation schema for params
const schemaParams = Joi.object({
    {{=it.m.f.p.names.underscore}}: Joi.string().length(24).hex().required()
});
// Validation schema for payload
const schemaPayload = Joi.object({
{{~it.m.f.f(f => !f.internal) : f}}
    {{=f.names.underscore}}: {{ out += joiValidator(f); }},
{{~}}
}).min(1);
 
/**
 * Export route to update {{=it.m.names.wordsLower}}
 */
module.exports = {
    method: 'PATCH',
    path: '/{{=it.m.names.hyphen}}/{{{=it.m.f.p.names.underscore}}}',
    config: {
        validate: {
            params: schemaParams,
            payload: schemaPayload
        },
        description: 'Route to update {{=it.m.names.wordsLower}}',
        tags: ['{{=it.m.names.hyphen}}', 'update']
    },
    handler: async (request, h) => {
 
        // Get updates from payload
        const updates = { $set: request.payload };
 
        // Get {{=it.m.names.wordsLower}} {{=it.m.f.p.names.wordsLower}}
        const {{=it.m.f.p.names.underscore}} = new MongoDB.ObjectId(request.params.{{=it.m.f.p.names.underscore}});

{{?it.m.f.r.f(r => !r.internal).length}}
 
        // Convert reference fields
{{~it.m.f.r.f(r => !r.internal) : r}}
{{?r.multiple}}
        updates.$set.{{=r.names.underscore}} = request.payload.{{=r.names.underscore}} instanceof Array ?
            request.payload.{{=r.names.underscore}}.map((i) => new MongoDB.ObjectId(i)) : null;
{{??}}
        updates.$set.{{=r.names.underscore}} = typeof request.payload.{{=r.names.underscore}} === 'string' ?
            new MongoDB.ObjectId(request.payload.{{=r.names.underscore}}) : null;
{{?}}
{{~}}
{{?}}
 
        // @hook update:before-update:{{=it.m.names.hyphen}}
 
        // Insertion options
        const options = { w: 'majority' };
 
        // Update {{=it.m.names.wordsLower}} in database
{{?it.m.f.u.length}}
        let result;
        try {
            result = await request.server.db.collection('{{=it.m.names.underscore}}')
                .findOneAndUpdate({ {{=it.m.f.p.names.underscore}} }, updates, options);
        }
        catch (e) {
            // Handle duplicated key for unique indexes
            return e.name === 'MongoError' && e.code === 11000 ?
                Boom.conflict('Duplicate key') :
                Boom.boomify(e);
        }
{{??}}
        const result = await request.server.db.collection('{{=it.m.names.underscore}}')
            .findOneAndUpdate({ {{=it.m.f.p.names.underscore}} }, updates, options);
{{?}}
 
        if (result.value === null) {
            return Boom.notFound('{{=it.m.names.wordsUpper}} not found');
        }
 
        return h.response().code(204);
    }
};
 
