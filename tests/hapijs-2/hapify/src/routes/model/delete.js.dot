'use strict';
 
/**
 * Delete {{=it.m.names.wordsLower}}
 */
 
const Joi = require('joi');
const Boom = require('boom');
const MongoDB = require('mongodb');
 
// Validation schema for params
const schema = Joi.object({
    {{=it.m.f.p.names.underscore}}: Joi.string().length(24).hex().required()
});
 
/**
 * Export route to delete {{=it.m.names.wordsLower}}
 */
module.exports = {
    method: 'DELETE',
    path: '/{{=it.m.names.hyphen}}/{{{=it.m.f.p.names.underscore}}}',
    config: {
        validate: { params: schema },
        description: 'Route to delete {{=it.m.names.wordsLower}}',
        tags: ['{{=it.m.names.hyphen}}', 'delete']
    },
    handler: async (request, h) => {
 
        // Get {{=it.m.names.wordsLower}} {{=it.m.f.p.names.wordsLower}}
        const {{=it.m.f.p.names.underscore}} = new MongoDB.ObjectId(request.params.{{=it.m.f.p.names.underscore}});
 
        // Remove {{=it.m.names.wordsLower}} from database
        const result = await request.server.db.collection('{{=it.m.names.underscore}}')
            .deleteOne({ {{=it.m.f.p.names.underscore}} });
 
        if (result.deletedCount === 0) {
            return Boom.notFound('{{=it.m.names.wordsUpper}} not found');
        }

{{?it.m.ri.length}}
 
{{~it.m.ri : m}}
{{~m.f: f}}
        // Remove references in {{=m.names.wordsLower}} as {{=f.names.wordsLower}}
        await request.server.db.collection('{{=m.names.underscore}}')
{{?f.multiple}}
            .updateMany({ {{=f.names.underscore}}: {{=it.m.f.p.names.underscore}} }, { $pull: { {{=f.names.underscore}}: {{=it.m.f.p.names.underscore}} } });
{{??}}
            .updateMany({ {{=f.names.underscore}}: {{=it.m.f.p.names.underscore}} }, { $set: { {{=f.names.underscore}}: null } });
{{?}}

{{~}}
{{~}}

{{?}}
 
        return h.response().code(204);
    }
};
 
