'use strict';
 
/**
 * Read {{=it.m.names.wordsLower}}
 */
 
const Joi = require('joi');
const Boom = require('boom');
const MongoDB = require('mongodb');
 
// Validation schema for params
const schema = Joi.object({
    {{=it.m.f.p.names.underscore}}: Joi.string().length(24).hex().required()
});
 
/**
 * Export route to get {{=it.m.names.wordsLower}}
 */
module.exports = {
    method: 'GET',
    path: '/{{=it.m.names.hyphen}}/{{{=it.m.f.p.names.underscore}}}',
    config: {
        validate: { params: schema },
        description: 'Route to get {{=it.m.names.wordsLower}}',
        tags: ['{{=it.m.names.hyphen}}', 'read']
    },
    handler: async (request) => {
 
        // Get {{=it.m.names.wordsLower}} {{=it.m.f.p.names.wordsLower}}
        const {{=it.m.f.p.names.underscore}} = new MongoDB.ObjectId(request.params.{{=it.m.f.p.names.underscore}});

{{?it.m.p.hasPrivate}}
 
        // Build projection for filtering private fields
        const projection = {
{{?it.m.p.mainlyPrivate}}
{{~it.m.f.f(f => !f.isPrivate && !f.primary) : f}}
            {{=f.names.underscore }}: true,
{{~}}
{{??}}
{{~it.m.f.ip : f}}
            {{=f.names.underscore }}: false,
{{~}}
{{?}}
        };
{{?}}
 
        // Get {{=it.m.names.wordsLower}} from database
        const result = await request.server.db.collection('{{=it.m.names.underscore}}')
            .findOne({ {{=it.m.f.p.names.underscore}} }{{?it.m.p.hasPrivate}}, { projection }{{?}});
 
        if (!result) {
            return Boom.notFound('{{=it.m.names.wordsUpper}} not found');
        }

{{?it.m.f.r.f(r => !r.isPrivate).length}}
 
        // Convert reference fields
        await request.server.utils.Entity
            .populate(request.server.db, result, [
{{~it.m.f.r.f(r => !r.isPrivate) : r}}
                {
                    col: '{{=r.m.names.underscore}}',
                    prop: '{{=r.names.underscore}}'{{?r.multiple}},
                    multiple: true{{?}}{{?r.m.p.hasPrivate}},
                    projection: {
{{?r.m.p.mainlyPrivate}}
{{~r.m.f.f(f => !f.isPrivate && !f.primary) : f}}
                        {{=f.names.underscore }}: true,
{{~}}
{{??}}
{{~r.m.f.ip : f}}
                        {{=f.names.underscore }}: false,
{{~}}
{{?}}
                    }
{{?}}
                },
{{~}}
            ]);
{{?}}
 
        return result;
    }
};
 
